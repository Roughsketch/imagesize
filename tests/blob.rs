#[cfg(test)]
use imagesize::{blob_size, ImageSize};

#[test]
fn blob_test() {
    //  PNG Header with size 123x321
    let data = vec![
        0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44,
        0x52, 0x00, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x01, 0x41, 0x08, 0x06, 0x00, 0x00, 0x00, 0x9A,
        0x38, 0xC4,
    ];

    let dim = blob_size(&data).unwrap();
    assert_eq!(
        dim,
        ImageSize {
            width: 123,
            height: 321
        }
    );
}

#[test]
fn blob_too_small_test() {
    let data = vec![0x89, 0x00, 0x01, 0x02];
    assert!(blob_size(&data).is_err());
}

#[test]
fn blob_test_fail() {
    //  Invalid PNG header (0x51 instead of 0x50)
    let data = vec![
        0x89, 0x51, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44,
        0x52, 0x00, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x01, 0x41, 0x08, 0x06, 0x00, 0x00, 0x00, 0x9A,
        0x38, 0xC4,
    ];

    assert!(blob_size(&data).is_err());
}

#[test]
fn gif_blob_too_small_test() {
    let data = vec![0x47, 0x49, 0x46, 0x38];
    assert!(blob_size(&data).is_err());
}

#[test]
fn blob_test_partial_ico() {
    let data = vec![
        // Header (says 6 images are included)
        0x00, 0x00, 0x01, 0x00, 0x06, 0x00, // Image 1 (16x32)
        0x10, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, // Image 2 (10x100)
        0x0A, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, // Image 3 (255x? run out of bytes)
        0xFF,
    ];
    let dim = blob_size(&data).unwrap();
    assert_eq!(
        dim,
        ImageSize {
            width: 10,
            height: 100
        }
    );
}
